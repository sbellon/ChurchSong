[project]
name = "ChurchSong"
version = "0.8.0"
authors = [{ name = "Stefan Bellon" }]
description = "Download the event agenda from ChurchTool and instantiate a PowerPoint slide template with the names and portraits of service staff as well as song database verification."
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.13"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
]
dependencies = [
    "packaging>=25.0",
    "platformdirs>=4.3.6",
    "polib>=1.2.0",
    "prettytable>=3.12.0",
    "psutil>=6.1.0; sys_platform == 'win32'",
    "pydantic>=2.9.2",
    "python-pptx>=1.0.2",
    "requests>=2.32.3",
    "rich>=14.0.0",
    "textual>=3.0.1",
    "typer>=0.15.2",
    "tzlocal>=5.3.1",
    "xlsxwriter>=3.2.3",
]

[project.urls]
Homepage = "https://github.com/sbellon/ChurchSong"
Repository = "https://github.com/sbellon/ChurchSong.git"
Changelog = "https://github.com/sbellon/ChurchSong/blob/main/CHANGELOG.md"

[project.scripts]
ChurchSong = "churchsong.__main__:main"

[dependency-groups]
dev = ["babel>=2.17.0"]
lint = ["pyright>=1.1.387", "ruff>=0.8.0"]

[tool.uv]
package = true

[tool.setuptools]
license-files = []

[tool.setuptools.package-data]
"churchsong" = ["locales/*.po"]

[tool.pyright]
venvPath = "."
venv = ".venv"
typeCheckingMode = "strict"

[tool.ruff]
line-length = 88
builtins = ["_"]

[tool.ruff.lint]
select = ["ALL"]

fixable = [
    "I", # isort
]

ignore = [
    "D",      # docstring
    "COM812", # missing-trailing-comma
    "S113",   # request-without-timeout
    "S603",   # subprocess-without-shell-equals-true
    "FBT001", # boolean-type-hint-positional-argument
    "FBT002", # boolean-default-value-positional-argument
]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.root_validator",
]

[tool.typos.default]
extend-ignore-re = [
    "(?Rm)^.*(#|//)\\s*typos:\\s*disable$",
    "(?s)(#|//)\\s*typos:\\s*off.*?\\n\\s*(#|//)\\s*typos:\\s*on",
]

[tool.typos.type.po]
extend-glob = ["*.po"]
check-file = false

[tool.bumpversion]
current_version = "0.8.0"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
ignore_missing_files = false
tag = false
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = false
commit = true
message = "Bump version: {current_version} → {new_version}"
moveable_tags = []
commit_args = ""
setup_hooks = []
pre_commit_hooks = ["uv sync", "git add uv.lock"]
post_commit_hooks = []

[[tool.bumpversion.files]]
filename = "pyproject.toml"

[[tool.bumpversion.files]]
filename = "CHANGELOG.md"
search = "Unreleased"
replace = "{new_version} ({now:%Y-%m-%d})"
